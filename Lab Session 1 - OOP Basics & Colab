{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Introduction to Python and data science"],"metadata":{"id":"y0pEZcJyr6tS"}},{"cell_type":"markdown","source":["<div class=\"markdown-google-sans\">\n","  <h2>Introduction to Colab</h2>\n","</div>\n","\n","In previous classes we had been using Jupyter Notebooks together with an IDE on our computer. For the DL class we will be using Colab.\n","\n","Colab is a notebook tool from Google or \"Colaboratory\", allows you to write and execute Python in your browser, without any installation required on your machine. It comes with some advantages:\n","\n","1.  Zero configuration required\n","2.  Access to GPUs free of charge\n","3.  Easy sharing\n","\n","For a full Colab tutorial, watch [Introduction to Colab](https://www.youtube.com/watch?v=inN8seMm7UI).\n","\n","\n"],"metadata":{"id":"vzO4ORi0pnw4"}},{"cell_type":"markdown","source":["<div class=\"markdown-google-sans\">\n","  <h2>Workstation setup</h2>\n","</div>\n","\n","During the lab, we will be working in Colab and use the Moodle page to upload and download resources.\n","\n","Colab comes with most standard Python packages, that you can mostly directly import. For a list of all the available packages, type:\n","\n","`!pip list`.\n","\n","Which runs the shell command `pip list` inside the notebook environment. It’s useful for checking which libraries are available in your current Colab session.\n","\n","In case you have to install a package (see below), type:\n","\n"," `!pip install package_name` .\n","\n","This installs a package into your Python environment.\n"],"metadata":{"id":"R0KF6Kf3qd8x"}},{"cell_type":"code","source":["!pip install selenium"],"metadata":{"id":"pg684If7u0XX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1758185925395,"user_tz":-120,"elapsed":23112,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}},"outputId":"ae1a3aaf-91ea-429d-eff0-0c094c83b35e"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting selenium\n","  Downloading selenium-4.35.0-py3-none-any.whl.metadata (7.4 kB)\n","Requirement already satisfied: urllib3<3.0,>=2.5.0 in /usr/local/lib/python3.12/dist-packages (from urllib3[socks]<3.0,>=2.5.0->selenium) (2.5.0)\n","Collecting trio~=0.30.0 (from selenium)\n","  Downloading trio-0.30.0-py3-none-any.whl.metadata (8.5 kB)\n","Collecting trio-websocket~=0.12.2 (from selenium)\n","  Downloading trio_websocket-0.12.2-py3-none-any.whl.metadata (5.1 kB)\n","Requirement already satisfied: certifi>=2025.6.15 in /usr/local/lib/python3.12/dist-packages (from selenium) (2025.8.3)\n","Collecting typing_extensions~=4.14.0 (from selenium)\n","  Downloading typing_extensions-4.14.1-py3-none-any.whl.metadata (3.0 kB)\n","Requirement already satisfied: websocket-client~=1.8.0 in /usr/local/lib/python3.12/dist-packages (from selenium) (1.8.0)\n","Requirement already satisfied: attrs>=23.2.0 in /usr/local/lib/python3.12/dist-packages (from trio~=0.30.0->selenium) (25.3.0)\n","Requirement already satisfied: sortedcontainers in /usr/local/lib/python3.12/dist-packages (from trio~=0.30.0->selenium) (2.4.0)\n","Requirement already satisfied: idna in /usr/local/lib/python3.12/dist-packages (from trio~=0.30.0->selenium) (3.10)\n","Collecting outcome (from trio~=0.30.0->selenium)\n","  Downloading outcome-1.3.0.post0-py2.py3-none-any.whl.metadata (2.6 kB)\n","Requirement already satisfied: sniffio>=1.3.0 in /usr/local/lib/python3.12/dist-packages (from trio~=0.30.0->selenium) (1.3.1)\n","Collecting wsproto>=0.14 (from trio-websocket~=0.12.2->selenium)\n","  Downloading wsproto-1.2.0-py3-none-any.whl.metadata (5.6 kB)\n","Requirement already satisfied: pysocks!=1.5.7,<2.0,>=1.5.6 in /usr/local/lib/python3.12/dist-packages (from urllib3[socks]<3.0,>=2.5.0->selenium) (1.7.1)\n","Requirement already satisfied: h11<1,>=0.9.0 in /usr/local/lib/python3.12/dist-packages (from wsproto>=0.14->trio-websocket~=0.12.2->selenium) (0.16.0)\n","Downloading selenium-4.35.0-py3-none-any.whl (9.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.6/9.6 MB\u001b[0m \u001b[31m48.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading trio-0.30.0-py3-none-any.whl (499 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m499.2/499.2 kB\u001b[0m \u001b[31m34.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading trio_websocket-0.12.2-py3-none-any.whl (21 kB)\n","Downloading typing_extensions-4.14.1-py3-none-any.whl (43 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.9/43.9 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading outcome-1.3.0.post0-py2.py3-none-any.whl (10 kB)\n","Downloading wsproto-1.2.0-py3-none-any.whl (24 kB)\n","Installing collected packages: wsproto, typing_extensions, outcome, trio, trio-websocket, selenium\n","  Attempting uninstall: typing_extensions\n","    Found existing installation: typing_extensions 4.15.0\n","    Uninstalling typing_extensions-4.15.0:\n","      Successfully uninstalled typing_extensions-4.15.0\n","Successfully installed outcome-1.3.0.post0 selenium-4.35.0 trio-0.30.0 trio-websocket-0.12.2 typing_extensions-4.14.1 wsproto-1.2.0\n"]}]},{"cell_type":"code","source":["import selenium"],"metadata":{"id":"mlozJ7m4sUFC","executionInfo":{"status":"ok","timestamp":1758185925399,"user_tz":-120,"elapsed":1,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["This loads a package that’s already installed into your running Python session so you can use it"],"metadata":{"id":"0SVjpNnXfhtX"}},{"cell_type":"markdown","source":["<div class=\"markdown-google-sans\">\n","  <h2>Recap programming</h2>\n","</div>\n","\n","We will start refreshing our programming skills using the notorious [1963 Iris database](https://en.wikipedia.org/wiki/Iris_flower_data_set)."],"metadata":{"id":"MEhjKwNhvAXX"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import numpy.random as rand\n","from sklearn.datasets import *"],"metadata":{"id":"dVOyVZBJtgXK","executionInfo":{"status":"ok","timestamp":1758185928752,"user_tz":-120,"elapsed":3351,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["data_dict = load_iris(as_frame=True) # as_frame arg loads as a pandas DataFrame (with metadata), instead of just as NumPy arrays."],"metadata":{"id":"QIWcT0sAybK4","executionInfo":{"status":"ok","timestamp":1758185928753,"user_tz":-120,"elapsed":4,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["data_dict # a dict of dfs"],"metadata":{"id":"yLgLOCCYgGSQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1758185928814,"user_tz":-120,"elapsed":56,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}},"outputId":"983e197f-33fc-4ef8-cfe1-7ec7b6ede276"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'data':      sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n"," 0                  5.1               3.5                1.4               0.2\n"," 1                  4.9               3.0                1.4               0.2\n"," 2                  4.7               3.2                1.3               0.2\n"," 3                  4.6               3.1                1.5               0.2\n"," 4                  5.0               3.6                1.4               0.2\n"," ..                 ...               ...                ...               ...\n"," 145                6.7               3.0                5.2               2.3\n"," 146                6.3               2.5                5.0               1.9\n"," 147                6.5               3.0                5.2               2.0\n"," 148                6.2               3.4                5.4               2.3\n"," 149                5.9               3.0                5.1               1.8\n"," \n"," [150 rows x 4 columns],\n"," 'target': 0      0\n"," 1      0\n"," 2      0\n"," 3      0\n"," 4      0\n","       ..\n"," 145    2\n"," 146    2\n"," 147    2\n"," 148    2\n"," 149    2\n"," Name: target, Length: 150, dtype: int64,\n"," 'frame':      sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n"," 0                  5.1               3.5                1.4               0.2   \n"," 1                  4.9               3.0                1.4               0.2   \n"," 2                  4.7               3.2                1.3               0.2   \n"," 3                  4.6               3.1                1.5               0.2   \n"," 4                  5.0               3.6                1.4               0.2   \n"," ..                 ...               ...                ...               ...   \n"," 145                6.7               3.0                5.2               2.3   \n"," 146                6.3               2.5                5.0               1.9   \n"," 147                6.5               3.0                5.2               2.0   \n"," 148                6.2               3.4                5.4               2.3   \n"," 149                5.9               3.0                5.1               1.8   \n"," \n","      target  \n"," 0         0  \n"," 1         0  \n"," 2         0  \n"," 3         0  \n"," 4         0  \n"," ..      ...  \n"," 145       2  \n"," 146       2  \n"," 147       2  \n"," 148       2  \n"," 149       2  \n"," \n"," [150 rows x 5 columns],\n"," 'target_names': array(['setosa', 'versicolor', 'virginica'], dtype='<U10'),\n"," 'DESCR': '.. _iris_dataset:\\n\\nIris plants dataset\\n--------------------\\n\\n**Data Set Characteristics:**\\n\\n:Number of Instances: 150 (50 in each of three classes)\\n:Number of Attributes: 4 numeric, predictive attributes and the class\\n:Attribute Information:\\n    - sepal length in cm\\n    - sepal width in cm\\n    - petal length in cm\\n    - petal width in cm\\n    - class:\\n            - Iris-Setosa\\n            - Iris-Versicolour\\n            - Iris-Virginica\\n\\n:Summary Statistics:\\n\\n============== ==== ==== ======= ===== ====================\\n                Min  Max   Mean    SD   Class Correlation\\n============== ==== ==== ======= ===== ====================\\nsepal length:   4.3  7.9   5.84   0.83    0.7826\\nsepal width:    2.0  4.4   3.05   0.43   -0.4194\\npetal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\\npetal width:    0.1  2.5   1.20   0.76    0.9565  (high!)\\n============== ==== ==== ======= ===== ====================\\n\\n:Missing Attribute Values: None\\n:Class Distribution: 33.3% for each of 3 classes.\\n:Creator: R.A. Fisher\\n:Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\\n:Date: July, 1988\\n\\nThe famous Iris database, first used by Sir R.A. Fisher. The dataset is taken\\nfrom Fisher\\'s paper. Note that it\\'s the same as in R, but not as in the UCI\\nMachine Learning Repository, which has two wrong data points.\\n\\nThis is perhaps the best known database to be found in the\\npattern recognition literature.  Fisher\\'s paper is a classic in the field and\\nis referenced frequently to this day.  (See Duda & Hart, for example.)  The\\ndata set contains 3 classes of 50 instances each, where each class refers to a\\ntype of iris plant.  One class is linearly separable from the other 2; the\\nlatter are NOT linearly separable from each other.\\n\\n.. dropdown:: References\\n\\n  - Fisher, R.A. \"The use of multiple measurements in taxonomic problems\"\\n    Annual Eugenics, 7, Part II, 179-188 (1936); also in \"Contributions to\\n    Mathematical Statistics\" (John Wiley, NY, 1950).\\n  - Duda, R.O., & Hart, P.E. (1973) Pattern Classification and Scene Analysis.\\n    (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\\n  - Dasarathy, B.V. (1980) \"Nosing Around the Neighborhood: A New System\\n    Structure and Classification Rule for Recognition in Partially Exposed\\n    Environments\".  IEEE Transactions on Pattern Analysis and Machine\\n    Intelligence, Vol. PAMI-2, No. 1, 67-71.\\n  - Gates, G.W. (1972) \"The Reduced Nearest Neighbor Rule\".  IEEE Transactions\\n    on Information Theory, May 1972, 431-433.\\n  - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al\"s AUTOCLASS II\\n    conceptual clustering system finds 3 classes in the data.\\n  - Many, many more ...\\n',\n"," 'feature_names': ['sepal length (cm)',\n","  'sepal width (cm)',\n","  'petal length (cm)',\n","  'petal width (cm)'],\n"," 'filename': 'iris.csv',\n"," 'data_module': 'sklearn.datasets.data'}"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df = data_dict['data']\n","label = data_dict['target']"],"metadata":{"id":"-FqKbH0K5zs7","executionInfo":{"status":"ok","timestamp":1758185928816,"user_tz":-120,"elapsed":1,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"id":"poR4-1Gs51hr","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1758185928891,"user_tz":-120,"elapsed":73,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}},"outputId":"afdebc25-6565-4a6e-d8db-60a81eab7b17"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n","0                  5.1               3.5                1.4               0.2\n","1                  4.9               3.0                1.4               0.2\n","2                  4.7               3.2                1.3               0.2\n","3                  4.6               3.1                1.5               0.2\n","4                  5.0               3.6                1.4               0.2\n","..                 ...               ...                ...               ...\n","145                6.7               3.0                5.2               2.3\n","146                6.3               2.5                5.0               1.9\n","147                6.5               3.0                5.2               2.0\n","148                6.2               3.4                5.4               2.3\n","149                5.9               3.0                5.1               1.8\n","\n","[150 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-de312a26-42e3-4b5c-a14b-95a1580c3eb9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>6.7</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.3</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>6.3</td>\n","      <td>2.5</td>\n","      <td>5.0</td>\n","      <td>1.9</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>6.5</td>\n","      <td>3.0</td>\n","      <td>5.2</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>6.2</td>\n","      <td>3.4</td>\n","      <td>5.4</td>\n","      <td>2.3</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>5.9</td>\n","      <td>3.0</td>\n","      <td>5.1</td>\n","      <td>1.8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de312a26-42e3-4b5c-a14b-95a1580c3eb9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-de312a26-42e3-4b5c-a14b-95a1580c3eb9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-de312a26-42e3-4b5c-a14b-95a1580c3eb9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-81b17d0a-741d-4fbd-abd7-cab1b1df4387\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81b17d0a-741d-4fbd-abd7-cab1b1df4387')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-81b17d0a-741d-4fbd-abd7-cab1b1df4387 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_0926d71d-ad44-4811-8da3-726ab86ea670\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_0926d71d-ad44-4811-8da3-726ab86ea670 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8280661279778629,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.435866284936698,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7652982332594667,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7622376689603465,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["label"],"metadata":{"id":"za_G5w63gNAO","colab":{"base_uri":"https://localhost:8080/","height":458},"executionInfo":{"status":"ok","timestamp":1758185928923,"user_tz":-120,"elapsed":34,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}},"outputId":"c8be1c30-7f1c-4738-b6c9-2bffb3f5fe3b"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      0\n","1      0\n","2      0\n","3      0\n","4      0\n","      ..\n","145    2\n","146    2\n","147    2\n","148    2\n","149    2\n","Name: target, Length: 150, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>150 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["df[df['sepal length (cm)'] <= 5].sort_values(by='sepal length (cm)',ascending=False)"],"metadata":{"id":"6_E4Bp4rvTEm","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1758185928951,"user_tz":-120,"elapsed":29,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}},"outputId":"f367823b-80a4-4103-a6db-92cf233b2d71"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n","4                  5.0               3.6                1.4               0.2\n","7                  5.0               3.4                1.5               0.2\n","25                 5.0               3.0                1.6               0.2\n","26                 5.0               3.4                1.6               0.4\n","43                 5.0               3.5                1.6               0.6\n","49                 5.0               3.3                1.4               0.2\n","40                 5.0               3.5                1.3               0.3\n","35                 5.0               3.2                1.2               0.2\n","93                 5.0               2.3                3.3               1.0\n","60                 5.0               2.0                3.5               1.0\n","34                 4.9               3.1                1.5               0.2\n","37                 4.9               3.6                1.4               0.1\n","9                  4.9               3.1                1.5               0.1\n","1                  4.9               3.0                1.4               0.2\n","106                4.9               2.5                4.5               1.7\n","57                 4.9               2.4                3.3               1.0\n","11                 4.8               3.4                1.6               0.2\n","12                 4.8               3.0                1.4               0.1\n","45                 4.8               3.0                1.4               0.3\n","30                 4.8               3.1                1.6               0.2\n","24                 4.8               3.4                1.9               0.2\n","29                 4.7               3.2                1.6               0.2\n","2                  4.7               3.2                1.3               0.2\n","3                  4.6               3.1                1.5               0.2\n","47                 4.6               3.2                1.4               0.2\n","22                 4.6               3.6                1.0               0.2\n","6                  4.6               3.4                1.4               0.3\n","41                 4.5               2.3                1.3               0.3\n","42                 4.4               3.2                1.3               0.2\n","8                  4.4               2.9                1.4               0.2\n","38                 4.4               3.0                1.3               0.2\n","13                 4.3               3.0                1.1               0.1"],"text/html":["\n","  <div id=\"df-7258467c-c247-43d9-9f09-90fd3a027eef\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>5.0</td>\n","      <td>3.4</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>5.0</td>\n","      <td>3.0</td>\n","      <td>1.6</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>5.0</td>\n","      <td>3.4</td>\n","      <td>1.6</td>\n","      <td>0.4</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>5.0</td>\n","      <td>3.5</td>\n","      <td>1.6</td>\n","      <td>0.6</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>5.0</td>\n","      <td>3.3</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>5.0</td>\n","      <td>3.5</td>\n","      <td>1.3</td>\n","      <td>0.3</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>5.0</td>\n","      <td>3.2</td>\n","      <td>1.2</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>93</th>\n","      <td>5.0</td>\n","      <td>2.3</td>\n","      <td>3.3</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","      <td>3.5</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>4.9</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>4.9</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.1</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>4.9</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>106</th>\n","      <td>4.9</td>\n","      <td>2.5</td>\n","      <td>4.5</td>\n","      <td>1.7</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>4.9</td>\n","      <td>2.4</td>\n","      <td>3.3</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>4.8</td>\n","      <td>3.4</td>\n","      <td>1.6</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>4.8</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.1</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>4.8</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.3</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>4.8</td>\n","      <td>3.1</td>\n","      <td>1.6</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>4.8</td>\n","      <td>3.4</td>\n","      <td>1.9</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.6</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>4.6</td>\n","      <td>3.2</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>4.6</td>\n","      <td>3.6</td>\n","      <td>1.0</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>4.6</td>\n","      <td>3.4</td>\n","      <td>1.4</td>\n","      <td>0.3</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>4.5</td>\n","      <td>2.3</td>\n","      <td>1.3</td>\n","      <td>0.3</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>4.4</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>4.4</td>\n","      <td>2.9</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>4.4</td>\n","      <td>3.0</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>4.3</td>\n","      <td>3.0</td>\n","      <td>1.1</td>\n","      <td>0.1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7258467c-c247-43d9-9f09-90fd3a027eef')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7258467c-c247-43d9-9f09-90fd3a027eef button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7258467c-c247-43d9-9f09-90fd3a027eef');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-e8a7d6fe-c950-4dbb-a766-440aa980d3be\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e8a7d6fe-c950-4dbb-a766-440aa980d3be')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-e8a7d6fe-c950-4dbb-a766-440aa980d3be button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[df['sepal length (cm)'] <= 5]\",\n  \"rows\": 32,\n  \"fields\": [\n    {\n      \"column\": \"sepal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2166459874333419,\n        \"min\": 4.3,\n        \"max\": 5.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.9,\n          4.5,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sepal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.40350030978922435,\n        \"min\": 2.0,\n        \"max\": 3.6,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          2.4,\n          2.5,\n          3.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal length (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7863695162765608,\n        \"min\": 1.0,\n        \"max\": 4.5,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          3.3,\n          1.4,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"petal width (cm)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3509060852210479,\n        \"min\": 0.1,\n        \"max\": 1.7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.2,\n          0.4,\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# @title TASK 1: print the average sepal length (cm) across all observations and its standard deviation.\n","df['sepal length (cm)'].mean(), df['sepal length (cm)'].std()"],"metadata":{"id":"spMHESAWobkd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1758185928952,"user_tz":-120,"elapsed":13,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}},"outputId":"b8f19052-9211-4a67-8b70-44f36f8b3af8"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(np.float64(5.843333333333334), 0.8280661279778629)"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# implement here"],"metadata":{"id":"czwYYEnhBVFv","executionInfo":{"status":"ok","timestamp":1758185928984,"user_tz":-120,"elapsed":12,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["#@title TASK 2: scatter plot the petal length against its petal width and color each data point according to its label. You may want to import matplotlib or your plotting library of choice.\n","import matplotlib.pyplot as plt\n","\n","color = {0:\"red\", 1:\"green\", 2:\"blue\"}\n","\n","plt.scatter(df['sepal length (cm)'], df['petal width (cm)'], color=label.map(color))"],"metadata":{"id":"_94cGETIo5Hl","colab":{"base_uri":"https://localhost:8080/","height":447},"executionInfo":{"status":"ok","timestamp":1758185929291,"user_tz":-120,"elapsed":317,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}},"outputId":"76788a52-33b7-4f4e-b6e1-4f9275a847d1"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7a801a3179e0>"]},"metadata":{},"execution_count":13},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.scatter(df['sepal length (cm)'], df['petal width (cm)'])"],"metadata":{"id":"zRPmE6V5BWnD","colab":{"base_uri":"https://localhost:8080/","height":447},"executionInfo":{"status":"ok","timestamp":1758185929445,"user_tz":-120,"elapsed":155,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}},"outputId":"59d1963b-8e4b-4e64-c15c-784d40a9c64b"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7a80199c7e00>"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Classes in Python"],"metadata":{"id":"aROfzngEhtZy"}},{"cell_type":"code","source":["class Car:\n","  def __init__(self,brand):\n","    self.brand = brand\n","\n","brand = 'audi'\n","\n","car = Car(brand='audi')\n","\n","print(car.brand != brand)\n","print(car.brand)"],"metadata":{"id":"XK9ySoBWSDT7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1758185929451,"user_tz":-120,"elapsed":6,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}},"outputId":"b228f158-7ec7-4662-f4dc-97643499bc84"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n","audi\n"]}]},{"cell_type":"code","source":["class Meal:\n","# Computes the price of your meal based on the total cost of is ingredients.\n","  def __init__(self, name, total_price=0):\n","    self.name = name\n","    self.ingredients = {}\n","    self.total_price = total_price\n","\n","  def add_ingredient(self, ingredient, price=0):\n","    self.ingredients[ingredient] = price # adds new k-v pair (if doesn't exist, otherwise updates)\n","    self.total_price = self.compute_total_price()\n","\n","  def compute_total_price(self):\n","    return sum(price for price in self.ingredients.values()) # generator expression given '()' - produces each price one by one, instead of building a full list in memory."],"metadata":{"id":"YylhNl-3xzji","executionInfo":{"status":"ok","timestamp":1758185929465,"user_tz":-120,"elapsed":12,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["##TO DO: compute the price of your morning porridge\n","\n","# 1) define a object called 'Breakfast'\n","# 2) add various ingredients\n","# 3) calculate the total price\n","\n","breakfast = Meal('porridge')\n","\n","breakfast.add_ingredient('milk', 2)\n","breakfast.add_ingredient('more milk', 2)\n","breakfast.compute_total_price()\n","\n","breakfast.ingredients"],"metadata":{"id":"bkCdI1d53tIc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1758185929475,"user_tz":-120,"elapsed":9,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}},"outputId":"6f5842c5-ca99-4eea-a580-c1818dfa0810"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'milk': 2, 'more milk': 2}"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["#@title TASK 3: build method add_ingredients that takes as input a list of ingredients and a list of prices and add them to the meal. The function should also check that the length of the two lists is compatible.\n","\n","class Meal:\n","    def __init__(self, name, total_price=0):\n","        self.name = name\n","        self.ingredients = {}\n","\n","    def add_ingredients(self, ingredients, prices):\n","        if len(ingredients) != len(prices):\n","            return None\n","\n","        for i in range(len(ingredients)):\n","            ingredient, price = ingredients[i], prices[i]\n","            self.add_ingredient(ingredient, price)"],"metadata":{"id":"g8KoW0m81rCt","executionInfo":{"status":"ok","timestamp":1758185929483,"user_tz":-120,"elapsed":7,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["class Meal:\n","    def __init__(self, name, total_price=0):\n","        self.name = name\n","        self.ingredients = {}\n","        self.total_price = total_price\n","\n"],"metadata":{"id":"mm1Nv7GyBZW1","executionInfo":{"status":"ok","timestamp":1758185929503,"user_tz":-120,"elapsed":17,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["#@title TASK 4: implement child class \"HappyMeal\". Add a private attribute to define the meal discount and a private method to apply discount. The discount should be applied when computing final price.\n","\n","class HappyMeal(Meal): # 1) inherit from base class `Meal`\n","\n","  def __init__(self, discount=.7): # 2) define constructor with any extra downstream argument(s) (here: 'discount')\n","\n","    super().__init__(name='HappyMeal') # 3) call parent constructor\n","\n","    self.add_ingredient('nuggets', 4)\n","    self.add_ingredient('fries', 3)\n","    self.add_ingredient('fanta', 1.99)\n","\n","    self._discount = discount # Python doesn’t have true private variables like Java or C++, but we use naming convention\n","    assert (discount >= 0) & (discount <= 1), 'this discount is too high!!' # NB if expression evaluates to False -> AssertionError raised\n","\n","    self.discounted_price = self.compute_total_price() * self._discount\n"],"metadata":{"id":"fQLc3Cnh5knh","executionInfo":{"status":"ok","timestamp":1758185929514,"user_tz":-120,"elapsed":7,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# implement here"],"metadata":{"id":"2zeteqzbBgi3","executionInfo":{"status":"ok","timestamp":1758185929525,"user_tz":-120,"elapsed":9,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["hp = HappyMeal(discount=1.1)"],"metadata":{"id":"3PEdPzVdY8UJ","colab":{"base_uri":"https://localhost:8080/","height":263},"executionInfo":{"status":"error","timestamp":1758185929543,"user_tz":-120,"elapsed":13,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}},"outputId":"cbbd7ed3-38b5-4a4b-b779-c2aeff65d3f8"},"execution_count":22,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'HappyMeal' object has no attribute 'add_ingredient'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-3308171005.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mHappyMeal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdiscount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1.1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/tmp/ipython-input-3614155319.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, discount)\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'HappyMeal'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# 3) call parent constructor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_ingredient\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'nuggets'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_ingredient\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'fries'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_ingredient\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'fanta'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1.99\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'HappyMeal' object has no attribute 'add_ingredient'"]}]},{"cell_type":"markdown","source":["<h1> Loading data in Colab </h1>"],"metadata":{"id":"tm6F8t8VCtfi"}},{"cell_type":"code","source":["# to load an external dataframe:\n","\n","# make a directory\n","!mkdir data\n","\n","# pull data via a URL links\n","!wget https://data.open-power-system-data.org/conventional_power_plants/2018-02-27/original_data/kraftwerke-de-ab-100-mw.xls -P data/\n","\n","\n","!wget \"https://www.bundesnetzagentur.de/DE/Fachthemen/ElektrizitaetundGas/Versorgungssicherheit/Erzeugungskapazitaeten/Kraftwerksliste/_DL/Kraftwerksliste.xlsx?__blob=publicationFile&v=13\" -O data/kraftwerksliste.xlsx\n","# O -> output file (renames)\n","\n","df = pd.read_excel(\"data/kraftwerke-de-ab-100-mw.xls\", header=9)\n","# uses 10th row (index 9) of xls sheet as header row (column names)"],"metadata":{"id":"svFKbz-Kt-Ny","executionInfo":{"status":"aborted","timestamp":1758185929639,"user_tz":-120,"elapsed":2,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"id":"1qBb98N7Ddih","executionInfo":{"status":"aborted","timestamp":1758185929641,"user_tz":-120,"elapsed":27452,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title To mount your Google Drive\n","\n","from google.colab import drive\n","\n","drive.mount('/content/drive')\n","\n","df.to_csv('/content/drive/MyDrive/lab_data.csv', index=False) # writes to GDrive\n","\n"],"metadata":{"id":"rfwyeRA7oEJh","executionInfo":{"status":"aborted","timestamp":1758185929642,"user_tz":-120,"elapsed":27451,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!rm /content/drive/MyDrive/lab_data.csv"],"metadata":{"id":"Z9D9x-p0GDVN","executionInfo":{"status":"aborted","timestamp":1758185929643,"user_tz":-120,"elapsed":27452,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["<div class=\"markdown-google-sans\">\n","  <h2>Preprocessing<h2>\n","</div>\n","\n","Preprocessing is a crucial step to clean and prepare raw data for modeling. It involves:\n","<ul>\n","  <li> cleaning: handling of missing values, duplicates and outliers </li>\n","  <li> rescaling: conversion of numerical data to new scales (e.g. normalization and standardization), encoding categorical variables (e.g. via dummy variables) </li>\n","  <li> feature selection and analysis: statistical analysis and visualisation (e.g. histograms, correlation, pairwise scatterplots)</li>\n","</ul>"],"metadata":{"id":"ov2G2cNwwCXZ"}},{"cell_type":"code","source":["#@title TASK 5: Keep only power plants with non NaN Bundesland and fill NaNs in the installed capacity (MW) (lektrische Bruttoleistung (MW)) with a 0 value. Make a new dataframe containing the installed capacity in MW and dummy columns for the state the units belongs to\n","\n","processed_df = df.copy()\n","\n","processed_df = processed_df[['Kraftwerksname / Standort', 'Bundesland', 'Elektrische Bruttoleistung (MW)']]\n","processed_df.dropna(subset=['Bundesland'], inplace=True)\n","processed_df['Elektrische Bruttoleistung (MW)'].fillna(0, inplace=True)\n","\n","bl_dummies = pd.get_dummies(processed_df['Bundesland']) # returns a new df w/ same rox indexes, where columns are Bundesland row values -> one-hot-encoded\n","\n","processed_df = pd.concat([processed_df, bl_dummies], axis=1) # column-wise\n","processed_df.head(5)\n"],"metadata":{"id":"SPUwgjQTvJLP","executionInfo":{"status":"aborted","timestamp":1758185929646,"user_tz":-120,"elapsed":2,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title TASK 5: Rescale each power plant to an installed capacity between 0 and 1. Scaling should be done based on the state (i.e. the smallest power plant for each state has scaled capacity of 0, the biggest of 1)\n","\n","def min_max_scaler(col):\n","  vmin, vmax = min(col), max(col) # value min / value max\n","\n","  return (col - vmin) / (vmax - vmin)\n","\n","\n","# NB can also use sklearn's MinMaxScaler\n","\n","processed_df['Scaled capacity'] = (\n","    processed_df.groupby('Bundesland', group_keys=False) # ensures original row alignment preserved; w/o it, mutli-indexed df\n","    .apply(lambda df: min_max_scaler(df['Elektrische Bruttoleistung (MW)'])) # [general form] `lambda arguments: expression`\n",")\n","\n","\n"],"metadata":{"id":"xvaezeqUy84G","executionInfo":{"status":"aborted","timestamp":1758185929647,"user_tz":-120,"elapsed":3,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# lambda fn 1\n","def sort_evens(list_1)\n","    list_2 = for i in list_1(i % 2)\n","\n","    return list_2\n","\n","nums = [1, 2, 3, 4, 5, 6]\n","evens = list(filter(sort_evens, nums)) # filter(function, iterable)\n","print(evens)\n","\n","# lambda fn 2\n","nums_2 = [1, 2, 3, 4]\n","squares = list(map(lambda x: x**2, nums_2)) # map(function, iterable)\n","print(squares)"],"metadata":{"id":"vL60itdc3Jge","executionInfo":{"status":"aborted","timestamp":1758185929647,"user_tz":-120,"elapsed":2,"user":{"displayName":"Henry Baker","userId":"15064444786389133924"}}},"execution_count":null,"outputs":[]}]}